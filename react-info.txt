GIT important commands:

git remote add origin URL
git pull url
git checkout -b feature/nameOfTheBranch
git branch

git add .
git commit -m "commit message"
git remote add origin https://github.com/wangx6/ui_demo.git
git push
git push --set-upstream origin feature/lqe-002-centre-panel
git remote -v

git push
git push --set-upstream origin feature/lqe-002-centre-panel
git remote -v

------------------------------------------------------------------------------------
Important React stuff:
Model - state-power-api
Component - state - constroller space[calls model via api] - view
useState [useState and view - not in same components, causes tetsing issue] instead use custom Hooks
useContext
... thread parameter
useEffect
async, await, promise()
router
testing jest, enzyme
common components button - project 2 and https://buttercms.com/blog/building-reusable-components-using-react 
css styling
css conventions - [has__ noun] [is -- adjective]
SASS
sass - install sass, import index.scss inside app.js so accessible to all components. 
sass conventions - index.scss and other component files _component.scss

project conventions: 
2 spaces[tab editor and edit in settings]
folders uppercase
file with two or more words use hyfon-
function no uppercase
constoller space - start with onXyz 

Initiazlise - onInit
onInit is useEffect with empty array [] and for particular props or function [props]

Forms
ErrorModel-ErrorContext

extension: prettier formatter,  simple react snippets, intellisense - css helper, code spell checker

Node and other tools: ESLint for JS, react icons, axios for calling capi, testing library jest-do/user-event, react-dom


ref:
project 1:
https://github.com/wangx6/todo-list
https://github.com/wangx6/capi_node_todo

project 2
https://github.com/wangx6/ui_demo
https://github.com/wangx6/ui_demo_capi

otherRef: 
https://github.com/ashishbharvirkar/counter-app
https://github.com/ashishbharvirkar/CHAT_APPLICATION

https://www.youtube.com/channel/UCmXmlB4-HJytD7wek0Uo97A
https://www.youtube.com/channel/UCFbNIlppjAuEX4znoulh0Cw
https://www.youtube.com/channel/UCwfaAHy4zQUb2APNOGXUCCA

https://buttercms.com/blog/building-reusable-components-using-react
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT
------------------------------------------------------------------------------------
important javascript lessons

https://github.com/jonasschmedtmann/complete-javascript-course/blob/master/10-Functions/
async, await, promise()

very important for map, array, iterators in JS:
loadash.com
underscorre.js
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT

------------------------------------------------------------------------------------
Swagger API doc setup:

https://developer.amazon.com/docs/amazon-drive/ad-restful-api-response-codes.html

https://editor.swagger.io/

https://swagger.io/docs/specification/2-0/basic-structure/ 

https://blog.logrocket.com/documenting-your-express-api-with-swagger/

------------------------------------------------------------------------------------

PIPELINE:
add dockerfile and jesnkins file in your project which links to openshift. [serve: script to 8080]
Change appVersion in pipelin.config given by dev_ops taem
project name - by developers

Look for training videos from XIN. local drive

Openshift - Stephen curtis and Dara for creating a dev/test environemnt

------------------------------------------------------------------------------------

JS testing

Needed in all test cases[Initialise as below for all tests]
ref: ToDOModel.test.js

import Enzyme, { mount } from 'Enzyme';
import Adapter17 from '@wojtekmaj/enzyme-adapter-react-17';
import { act } from 'react-dom/test-utils';
import axios from 'axios';

jest.mock('axios');

Enzyme.configure({adapter: new Adapter17()});

let tdm;
function wrapper(hook) {
    const HookWrapper = () => {
        tdm = hook();
        return null;
    }
    mount(<HookWrapper />);
    return tdm ;
}

describe('unit test for todo model', () => {
    it('should initalize', () => {
        let tdm = wrapper(ToDoModel);
        expect(tdm.todos).toEqual([]);
        expect(tdm.active).toEqual([]);
        expect(tdm.completed).toEqual([]);
        expect(tdm.pending).toEqual([]);
    });

